// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id                   String   @id @default(cuid())
  clerkId              String?  @unique // For Clerk integration
  username             String?  @unique // For custom authentication
  email                String   @unique
  password             String?  // For custom authentication
  firstName            String?
  lastName             String?
  fullName             String?
  phone                String?
  gender               Gender?
  avatar               String?  // URL to profile picture
  
  // Account status
  isActive             Boolean  @default(true)
  isVerified           Boolean  @default(false)
  status               UserStatus @default(ACTIVE)
  
  // Notification preferences
  emailNotifications   Boolean  @default(true)
  smsNotifications     Boolean  @default(false)
  pushNotifications    Boolean  @default(true)
  
  // Privacy settings
  profileVisible       Boolean  @default(true)
  
  // Role and permissions
  role                 UserRole @default(CLIENT)
  
  // Timestamps
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  lastLoginAt          DateTime?
  
  // Relations (for future expansion)
  clientAppointments   Appointment[] @relation("ClientAppointments")
  sentMessages         Message[] @relation("SentMessages")
  receivedMessages     Message[] @relation("ReceivedMessages")
  consultations        Consultation[]
  lawyer               Lawyer?
  notifications        Notification[]
  
  // Video interactions
  videoLikes           VideoLike[]
  videoComments        VideoComment[]
  videoViews           VideoView[]
  
  @@map("users")
}

enum UserRole {
  CLIENT
  LAWYER
  ADMIN
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  INACTIVE
  PENDING_VERIFICATION
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

// Updated Appointment model with lawyer relationship
model Appointment {
  id            String   @id @default(cuid())
  clientId      String
  lawyerId      String
  title         String
  description   String?
  startTime     DateTime
  endTime       DateTime
  duration      String?   // e.g., "1 hour", "30 minutes"
  meetingType   MeetingType @default(VIRTUAL)
  meetingLink   String?
  practiceArea  String?
  status        AppointmentStatus @default(PENDING)
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  client        User     @relation("ClientAppointments", fields: [clientId], references: [id], onDelete: Cascade)
  lawyer        Lawyer   @relation(fields: [lawyerId], references: [id], onDelete: Cascade)
  
  @@map("appointments")
}

// Enhanced Lawyer Availability model
model LawyerAvailability {
  id          String   @id @default(cuid())
  lawyerId    String
  dayOfWeek   Int      // 0=Sunday, 1=Monday, ..., 6=Saturday
  startTime   String   // Format: "09:00"
  endTime     String   // Format: "17:00"
  isAvailable Boolean  @default(true)
  date        DateTime? // For specific date overrides (optional)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  lawyer      Lawyer   @relation(fields: [lawyerId], references: [id], onDelete: Cascade)
  
  @@unique([lawyerId, dayOfWeek])
  @@map("lawyer_availability")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType @default(APPOINTMENT_CONFIRMED)
  isRead    Boolean  @default(false)
  data      Json?    // Store appointment ID, etc.
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}


model Consultation {
  id          String   @id @default(cuid())
  clientId    String
  client      User     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  title       String
  description String?
  status      ConsultationStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("consultations")
}

enum AppointmentStatus {
  PENDING
  SCHEDULED
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum MeetingType {
  VIRTUAL
  IN_PERSON
  PHONE
}

enum NotificationType {
  APPOINTMENT_CONFIRMED
  APPOINTMENT_CANCELLED
  APPOINTMENT_REMINDER
  APPOINTMENT_REQUEST
  APPOINTMENT_RESCHEDULED
  LAWYER_VERIFICATION_PENDING
  LAWYER_VERIFICATION_APPROVED
  LAWYER_VERIFICATION_REJECTED
  DOCUMENT_SUBMITTED
  DOCUMENT_REVIEW_REQUIRED
}

enum VerificationStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  RESUBMISSION_REQUIRED
}

enum DocumentType {
  BAR_CERTIFICATE
  PRACTICING_CERTIFICATE
  ID_DOCUMENT
  CV_RESUME
  LAW_DEGREE
  OTHER
}

enum ConsultationStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Lawyer {
  id       String  @id @default(cuid())
  userId    String @unique
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  professionalSummary      String?
  firm String
  location String?
  barAdmissionYear  String?
  experience Int?
  practiceAreas String[] // Array of strings for practice areas
  education String?
  barAssociation String?
  website String?
  specializations String[] // Array of strings for specializations
  languages String[] // Array of strings for languages spoken
  
  // Availability settings
  isAvailableForBooking Boolean @default(true)
  defaultAvailability Json? // JSON object for weekly schedule
  timeZone String @default("GMT")
  
  // Verification status
  verificationStatus VerificationStatus @default(PENDING)
  isVerified Boolean @default(false)
  verifiedAt DateTime?
  
  // Document URLs - Arrays to support multiple files
  barCertificateUrl String[]
  practicingCertificateUrl String[]
  idDocumentUrl String[]
  cvResumeUrl String[]
  lawDegreeUrl String[]
  otherDocumentUrl String[]
  videoUrl String[] // New field for video URLs
  
  // Certificate verification info
  certificateNumber String?
  certificateVerified Boolean @default(false)
  certificateVerifiedAt DateTime?
  
  verification LawyerVerification?
  
  // Video content
  videos           Video[]
  
  // Video interactions
  videoLikes       VideoLike[]
  videoComments    VideoComment[]
  videoViews       VideoView[]
  
  // Availability relationships
  availabilitySlots LawyerAvailability[]
  bookedAppointments Appointment[]
  
  @@map("lawyers")
}

model Certificate {
  id                Int      @id @default(autoincrement())
  nameOfLawyer      String
  dateOfIssue       DateTime
  certificateNumber String   @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("certificates")
}

model LawyerVerification {
  id        String   @id @default(cuid())
  lawyerId  String   @unique
  lawyer    Lawyer   @relation(fields: [lawyerId], references: [id], onDelete: Cascade)
  
  // Verification details
  status    VerificationStatus @default(PENDING)
  submittedAt DateTime @default(now())
  reviewedAt DateTime?
  reviewedBy String? // Admin user ID
  
  // Certificate verification
  certificateVerified Boolean @default(false)
  certificateNumber String?
  certificateName String?
  certificateIssueDate DateTime?
  certificateMatchScore Float? // Matching confidence score
  
  // Document verification
  documentsSubmitted DocumentType[]
  documentsVerified DocumentType[]
  documentsRejected DocumentType[]
  
  // Review notes
  adminNotes String?
  rejectionReason String?
  
  // Resubmission tracking
  resubmissionCount Int @default(0)
  lastResubmissionAt DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("lawyer_verifications")
}

// Video content model for lawyer educational content
model Video {
  id          String      @id @default(cuid())
  title       String
  description String
  category    String      @default("General")
  language    String      @default("English")
  tags        String[]    @default([])
  url         String      // S3 URL
  key         String      // S3 key for deletion
  duration    String?     @default("0:00") // e.g., "15:30"
  thumbnail   String?     // Thumbnail image URL
  views       Int         @default(0)
  status      VideoStatus @default(ACTIVE)
  
  // Relations
  lawyerId    String
  lawyer      Lawyer      @relation(fields: [lawyerId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Interactions (updating existing models to reference video ID)
  likes       VideoLike[]
  comments    VideoComment[]
  videoViews  VideoView[]
  
  @@map("videos")
}

enum VideoStatus {
  ACTIVE
  INACTIVE
  PROCESSING
  FAILED
}

model VideoLike {
  id        String   @id @default(cuid())
  userId    String
  lawyerId  String
  videoId   String   // Reference to Video model
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lawyer    Lawyer   @relation(fields: [lawyerId], references: [id], onDelete: Cascade)
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  
  // Ensure a user can only like a video once
  @@unique([userId, videoId])
  @@map("video_likes")
}

model VideoComment {
  id        String   @id @default(cuid())
  userId    String
  lawyerId  String
  videoId   String   // Reference to Video model
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lawyer    Lawyer   @relation(fields: [lawyerId], references: [id], onDelete: Cascade)
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  
  @@map("video_comments")
}

model VideoView {
  id        String   @id @default(cuid())
  userId    String?  // Optional - anonymous views are allowed
  lawyerId  String
  videoId   String   // Reference to Video model
  viewedAt  DateTime @default(now())
  
  // Track view duration for analytics (optional)
  duration  Int?     // Duration watched in seconds
  
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  lawyer    Lawyer   @relation(fields: [lawyerId], references: [id], onDelete: Cascade)
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  
  // Allow multiple views from same user but track each view separately
  @@map("video_views")
}

// Adding Message model
model Message {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  senderRole String   // "lawyer" or "user"
  content    String
  messageType String @default("message") // "message", "call-request", "appointment-request"
  status     String  @default("active")  // "active", "resolved", "cancelled"
  createdAt  DateTime @default(now())
  readAt     DateTime?
  
  // Relations
  sender     User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  
  @@map("messages")
}


